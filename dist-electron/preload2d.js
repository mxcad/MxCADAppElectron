"use strict";const n=require("electron"),R="7.0.0";let a={common:{update:"update",programInstallationLocation:"ProgramInstallationLocation"},file:{openFile:"openFile",getFileOpenRecords:"getFileOpenRecords"},winMain:{close:"close",min:"min",max:"max",isMaximized:"isMaximized"},viewTab:{data:"data",add:"add",close:"close",active:"active",onUpdate:"onUpdate",closeAll:"closeAll"},message:{onShowMessage:"onShowMessage"},loading:{onShowLoading:"onShowLoading",onHideLoading:"onHideLoading"},wasm:{getWasmBinary:"getWasmBinary"},debug:{tools:"debug-tools"}};function E(e,r="modules"){for(const o in e){const i=e[o];typeof i=="string"?e[o]=`${r}.${i}`:typeof i=="object"&&E(i,`${r}.${o}`)}return e}a=E(a);const l=a.common,d=a.winMain,t=a.viewTab,p=a.file,v=a.message,_=a.wasm,g=a.loading,N=a.debug,w={winMainCose:()=>n.ipcRenderer.invoke(d.close),winMainMax:()=>n.ipcRenderer.invoke(d.max),winMainMin:()=>n.ipcRenderer.invoke(d.min),winIsMaximized:()=>n.ipcRenderer.invoke(d.isMaximized),openFile:e=>n.ipcRenderer.invoke(p.openFile,e),getFileOpenRecords:()=>n.ipcRenderer.invoke(p.getFileOpenRecords),version:R,getProgramInstallationLocation:()=>n.ipcRenderer.invoke(l.programInstallationLocation),checkForUpdates:()=>n.ipcRenderer.invoke(l.update),viewTab:{data:()=>n.ipcRenderer.invoke(t.data),add:e=>n.ipcRenderer.invoke(t.add,e),close:e=>n.ipcRenderer.invoke(t.close,e),active:e=>n.ipcRenderer.invoke(t.active,e),onUpdate:e=>{n.ipcRenderer.on(t.onUpdate,(r,o)=>e(o))}},debugTools:()=>n.ipcRenderer.invoke(N.tools),onShowMessage:e=>{n.ipcRenderer.on(v.onShowMessage,(r,o,i)=>e(o,i))},onShowLoading:e=>{n.ipcRenderer.on(g.onShowLoading,(r,o)=>{const{abortId:i,...c}=o;c.abort=(...m)=>{n.ipcRenderer.invoke(i,...m)},e(c)})},onHideLoading:e=>{n.ipcRenderer.on(g.onHideLoading,(r,...o)=>e(...o))}};let s={file:{openDrawingFile:"openDrawingFile"}};function M(e,r="mxApi2d"){for(const o in e){const i=e[o];typeof i=="string"?e[o]=`${r}.${i}`:typeof i=="object"&&M(i,`${r}.${o}`)}return e}s=M(s);const A=s.file;n.contextBridge.exposeInMainWorld("MxElectronAPI",{...w,openDrawingFile:e=>n.ipcRenderer.invoke(A.openDrawingFile,e),getWasmBinary:e=>n.ipcRenderer.invoke(_.getWasmBinary,e)});
