"use strict";const n=require("electron"),M="7.0.0";let i={common:{update:"update",programInstallationLocation:"ProgramInstallationLocation",clearFileCache:"clearFileCache"},file:{openFile:"openFile",getFileOpenRecords:"getFileOpenRecords"},winMain:{close:"close",min:"min",max:"max",isMaximized:"isMaximized"},viewTab:{data:"data",add:"add",close:"close",active:"active",onUpdate:"onUpdate",closeAll:"closeAll"},message:{onShowMessage:"onShowMessage"},loading:{onShowLoading:"onShowLoading",onHideLoading:"onHideLoading"},wasm:{getWasmBinary:"getWasmBinary"},debug:{tools:"debug-tools"}};function g(e,r="modules"){for(const o in e){const a=e[o];typeof a=="string"?e[o]=`${r}.${a}`:typeof a=="object"&&g(a,`${r}.${o}`)}return e}i=g(i);const t=i.common,d=i.winMain,c=i.viewTab,l=i.file,m=i.message,R=i.wasm,p=i.loading,v=i.debug,_={winMainCose:()=>n.ipcRenderer.invoke(d.close),winMainMax:()=>n.ipcRenderer.invoke(d.max),winMainMin:()=>n.ipcRenderer.invoke(d.min),winIsMaximized:()=>n.ipcRenderer.invoke(d.isMaximized),openFile:e=>n.ipcRenderer.invoke(l.openFile,e),getFileOpenRecords:()=>n.ipcRenderer.invoke(l.getFileOpenRecords),version:M,getProgramInstallationLocation:()=>n.ipcRenderer.invoke(t.programInstallationLocation),checkForUpdates:()=>n.ipcRenderer.invoke(t.update),clearFileCache:()=>n.ipcRenderer.invoke(t.clearFileCache),viewTab:{data:()=>n.ipcRenderer.invoke(c.data),add:e=>n.ipcRenderer.invoke(c.add,e),close:e=>n.ipcRenderer.invoke(c.close,e),active:e=>n.ipcRenderer.invoke(c.active,e),onUpdate:e=>{n.ipcRenderer.on(c.onUpdate,(r,o)=>e(o))}},debugTools:()=>n.ipcRenderer.invoke(v.tools),onShowMessage:e=>{n.ipcRenderer.on(m.onShowMessage,(r,o,a)=>e(o,a))},onShowLoading:e=>{n.ipcRenderer.on(p.onShowLoading,(r,o)=>{const{abortId:a,...s}=o;s.abort=(...E)=>{n.ipcRenderer.invoke(a,...E)},e(s)})},onHideLoading:e=>{n.ipcRenderer.on(p.onHideLoading,(r,...o)=>e(...o))}};n.contextBridge.exposeInMainWorld("MxElectronAPI",{..._,getWasmBinary:e=>n.ipcRenderer.invoke(R.getWasmBinary,e)});
